package com.example.vulnerabilitysdksystem.vulnerabilities.controller;

import com.example.vulnerabilitysdksystem.vulnerabilities.model.*;
import com.example.vulnerabilitysdksystem.vulnerabilities.network.ApiClient;
import com.example.vulnerabilitysdksystem.vulnerabilities.network.VulnerabilityService;
import com.example.vulnerabilitysdksystem.vulnerabilities.utils.TokenGenerator;

import java.util.HashMap;
import java.util.Map;
import java.util.List;


public class VulnerabilitiesController {
    private final VulnerabilityService service;
    private String authToken;
    private String userId;

    public interface Callback<T> {
        void onSuccess(T response);
        void onError(String error);
    }

    public VulnerabilitiesController() {
        service = ApiClient.getService();
    }

    public void register(String username, String password, Callback<AuthResponse> callback) {
        if (callback == null) return;

        Map<String, String> credentials = new HashMap<>();
        credentials.put("username", username);
        credentials.put("password", password);

        System.out.println("Registering user: " + username);
        
        service.register(credentials).enqueue(new retrofit2.Callback<AuthResponse>() {
            @Override
            public void onResponse(retrofit2.Call<AuthResponse> call, retrofit2.Response<AuthResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    AuthResponse authResponse = response.body();
                    authToken = authResponse.getToken();
                    userId = authResponse.getUserId();
                    System.out.println("Registration Successful!");
                    System.out.println("User ID: " + userId);
                    callback.onSuccess(authResponse);
                } else {
                    String error = "Registration failed: " + response.message();
                    System.out.println(error);
                    callback.onError(error);
                }
            }

            @Override
            public void onFailure(retrofit2.Call<AuthResponse> call, Throwable t) {
                String error = "Network error: " + t.getMessage();
                System.out.println(error);
                callback.onError(error);
            }
        });
    }

    public void login(String username, String password, Callback<AuthResponse> callback) {
        if (callback == null) return;

        Map<String, String> credentials = new HashMap<>();
        credentials.put("username", username);
        credentials.put("password", password);

        System.out.println("Logging in user: " + username);
        
        service.login(credentials).enqueue(new retrofit2.Callback<AuthResponse>() {
            @Override
            public void onResponse(retrofit2.Call<AuthResponse> call, retrofit2.Response<AuthResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    AuthResponse authResponse = response.body();
                    authToken = authResponse.getToken();
                    userId = authResponse.getUserId();
                    System.out.println("Login Successful!");
                    System.out.println("User ID: " + userId);
                    callback.onSuccess(authResponse);
                } else {
                    String error = "Login failed: " + response.message();
                    System.out.println(error);
                    callback.onError(error);
                }
            }

            @Override
            public void onFailure(retrofit2.Call<AuthResponse> call, Throwable t) {
                String error = "Network error: " + t.getMessage();
                System.out.println(error);
                callback.onError(error);
            }
        });
    }

    public void logout() {
        authToken = null;
        userId = null;
        System.out.println("Logged out successfully");
    }

    public void scanCode(String code, String language, Callback<ScanResponse> callback) {
        if (callback == null || authToken == null) {
            System.out.println("Error: Not authenticated");
            callback.onError("Not authenticated");
            return;
        }
    
        Map<String, String> scanRequest = new HashMap<>();
        scanRequest.put("code", code);
        scanRequest.put("language", language);
        String token = TokenGenerator.generateToken();
        scanRequest.put("token", token);
    
        System.out.println("Scanning code...");
        System.out.println("Language: " + language);
        System.out.println("Scan Token: " + token);
    
        service.scanCode("Bearer " + authToken, scanRequest).enqueue(new retrofit2.Callback<ScanResponse>() {
            @Override
            public void onResponse(retrofit2.Call<ScanResponse> call, retrofit2.Response<ScanResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    ScanResponse scanResponse = response.body();
                    ScanResults results = scanResponse.getResults();
    
                    System.out.println("\nScan Results:");
                    System.out.println("-------------");
                    System.out.println("Scan ID: " + scanResponse.getScanId());
                    if (results != null) {
                        System.out.println("Language: " + results.getLanguage());
                        System.out.println("Timestamp: " + results.getTimestamp());
                        System.out.println("Total Findings: " + results.getTotalFindings());
    
                        if (results.getFindings() != null && !results.getFindings().isEmpty()) {
                            for (Vulnerability.Finding finding : results.getFindings()) {
                                System.out.println("Severity: " + finding.getSeverity());
                                System.out.println("Description: " + finding.getDescription());
                                System.out.println("Category: " + finding.getCategory());
                                System.out.println("Line: " + finding.getLineNumber());
                                System.out.println("Context: " + finding.getContext());
                                System.out.println("-------------");
                            }
                        } else {
                            System.out.println("No findings returned.");
                        }
                    } else {
                        System.out.println("No scan results found.");
                    }
    
                    callback.onSuccess(scanResponse);
                } else {
                    String error = "Scan failed: " + response.message();
                    System.out.println(error);
                    callback.onError(error);
                }
            }
    
            @Override
            public void onFailure(retrofit2.Call<ScanResponse> call, Throwable t) {
                String error = "Network error: " + t.getMessage();
                System.out.println(error);
                callback.onError(error);
            }
        });
    }
    

    public void getScanHistory(Callback<ScanHistoryResponse> callback) {
        if (callback == null || authToken == null) {
            System.out.println("Error: Not authenticated");
            callback.onError("Not authenticated");
            return;
        }
    
        System.out.println("Fetching scan history...");
    
        service.getScanHistory("Bearer " + authToken).enqueue(new retrofit2.Callback<ScanHistoryResponse>() {
            @Override
            public void onResponse(retrofit2.Call<ScanHistoryResponse> call, retrofit2.Response<ScanHistoryResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    ScanHistoryResponse historyResponse = response.body();
                    List<ScanHistoryResponse.ScanHistoryItem> scans = historyResponse.getScans();
    
                    System.out.println("\nScan History:");
                    System.out.println("-------------");
    
                    if (scans != null && !scans.isEmpty()) {
                        for (ScanHistoryResponse.ScanHistoryItem scan : scans) {
                            System.out.println("Scan ID: " + scan.getId());
                            System.out.println("Language: " + scan.getLanguage());
                            System.out.println("Timestamp: " + scan.getTimestamp());
    
                            if (scan.getResults() != null && scan.getResults().getFindings() != null) {
                                System.out.println("Findings count: " + scan.getResults().getFindings().size());
                            }
    
                            System.out.println("-------------");
                        }
                    } else {
                        System.out.println("No scan history available.");
                    }
    
                    callback.onSuccess(historyResponse);
                } else {
                    String error = "Failed to get scan history: " + response.message();
                    System.out.println(error);
                    callback.onError(error);
                }
            }
    
            @Override
            public void onFailure(retrofit2.Call<ScanHistoryResponse> call, Throwable t) {
                String error = "Network error: " + t.getMessage();
                System.out.println(error);
                callback.onError(error);
            }
        });
    }
    

    public void getScanDetails(String scanId, Callback<ScanResponse> callback) {
        if (callback == null || authToken == null) {
            System.out.println("Error: Not authenticated");
            callback.onError("Not authenticated");
            return;
        }
    
        System.out.println("Fetching scan details for ID: " + scanId);
    
        service.getScanDetails("Bearer " + authToken, scanId).enqueue(new retrofit2.Callback<ScanResponse>() {
            @Override
            public void onResponse(retrofit2.Call<ScanResponse> call, retrofit2.Response<ScanResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    ScanResponse scanResponse = response.body();
                    ScanResults results = scanResponse.getResults();
    
                    System.out.println("\nScan Details:");
                    System.out.println("-------------");
                    System.out.println("Scan ID: " + scanResponse.getScanId());
                    if (results != null && results.getFindings() != null) {
                        for (Vulnerability.Finding finding : results.getFindings()) {
                            System.out.println("Severity: " + finding.getSeverity());
                            System.out.println("Description: " + finding.getDescription());
                            System.out.println("Category: " + finding.getCategory());
                            System.out.println("Line: " + finding.getLineNumber());
                            System.out.println("Context: " + finding.getContext());
                            System.out.println("-------------");
                        }
                    } else {
                        System.out.println("No findings found");
                    }
    
                    callback.onSuccess(scanResponse);
                } else {
                    String error = "Failed to get scan details: " + response.message();
                    System.out.println(error);
                    callback.onError(error);
                }
            }
    
            @Override
            public void onFailure(retrofit2.Call<ScanResponse> call, Throwable t) {
                String error = "Network error: " + t.getMessage();
                System.out.println(error);
                callback.onError(error);
            }
        });
    }
    

    public void deleteScan(String scanId, Callback<DeleteResponse> callback) {
        if (callback == null || authToken == null) {
            System.out.println("Error: Not authenticated");
            callback.onError("Not authenticated");
            return;
        }

        System.out.println("Deleting scan with ID: " + scanId);
        
        service.deleteScan(authToken, scanId).enqueue(new retrofit2.Callback<DeleteResponse>() {
            @Override
            public void onResponse(retrofit2.Call<DeleteResponse> call, retrofit2.Response<DeleteResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    System.out.println("Scan deleted successfully!");
                    callback.onSuccess(response.body());
                } else {
                    String error = "Failed to delete scan: " + response.message();
                    System.out.println(error);
                    callback.onError(error);
                }
            }

            @Override
            public void onFailure(retrofit2.Call<DeleteResponse> call, Throwable t) {
                String error = "Network error: " + t.getMessage();
                System.out.println(error);
                callback.onError(error);
            }
        });
    }
} 
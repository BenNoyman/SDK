package com.example.vulnerabilitysdksystem.vulnerabilities.controller;

import com.example.vulnerabilitysdksystem.vulnerabilities.model.*;
import com.example.vulnerabilitysdksystem.vulnerabilities.network.VulnerabilityService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.util.HashMap;
import java.util.Map;

import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class VulnerabilitiesController {
    private static final String BASE_URL = "http://192.168.1.101:5000/api/";
    private final VulnerabilityService service;
    private String authToken;
    private String userId;

    public interface Callback<T> {
        void onSuccess(T response);
        void onError(String error);
    }

    public VulnerabilitiesController() {
        Gson gson = new GsonBuilder()
                .setLenient()
                .create();

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(BASE_URL)
                .addConverterFactory(GsonConverterFactory.create(gson))
                .build();

        service = retrofit.create(VulnerabilityService.class);
    }

    public void register(String username, String password, Callback<AuthResponse> callback) {
        if (callback == null) return;

        Map<String, String> credentials = new HashMap<>();
        credentials.put("username", username);
        credentials.put("password", password);

        service.register(credentials).enqueue(new retrofit2.Callback<AuthResponse>() {
            @Override
            public void onResponse(retrofit2.Call<AuthResponse> call, retrofit2.Response<AuthResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    AuthResponse authResponse = response.body();
                    authToken = authResponse.getToken();
                    userId = authResponse.getUserId();
                    callback.onSuccess(authResponse);
                } else {
                    callback.onError("Registration failed");
                }
            }

            @Override
            public void onFailure(retrofit2.Call<AuthResponse> call, Throwable t) {
                callback.onError(t.getMessage());
            }
        });
    }

    public void login(String username, String password, Callback<AuthResponse> callback) {
        if (callback == null) return;

        Map<String, String> credentials = new HashMap<>();
        credentials.put("username", username);
        credentials.put("password", password);

        service.login(credentials).enqueue(new retrofit2.Callback<AuthResponse>() {
            @Override
            public void onResponse(retrofit2.Call<AuthResponse> call, retrofit2.Response<AuthResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    AuthResponse authResponse = response.body();
                    authToken = authResponse.getToken();
                    userId = authResponse.getUserId();
                    callback.onSuccess(authResponse);
                } else {
                    callback.onError("Login failed");
                }
            }

            @Override
            public void onFailure(retrofit2.Call<AuthResponse> call, Throwable t) {
                callback.onError(t.getMessage());
            }
        });
    }

    public void logout() {
        authToken = null;
        userId = null;
    }

    public void scanCode(String code, String language, Callback<ScanResponse> callback) {
        if (callback == null) return;
        if (authToken == null) {
            callback.onError("Not authenticated");
            return;
        }

        Map<String, String> scanRequest = new HashMap<>();
        scanRequest.put("code", code);
        scanRequest.put("language", language);

        service.scanCode("Bearer " + authToken, scanRequest).enqueue(new retrofit2.Callback<ScanResponse>() {
            @Override
            public void onResponse(retrofit2.Call<ScanResponse> call, retrofit2.Response<ScanResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    callback.onSuccess(response.body());
                } else {
                    callback.onError("Scan failed");
                }
            }

            @Override
            public void onFailure(retrofit2.Call<ScanResponse> call, Throwable t) {
                callback.onError(t.getMessage());
            }
        });
    }

    public void getScanHistory(Callback<ScanHistoryResponse> callback) {
        if (callback == null) return;
        if (authToken == null) {
            callback.onError("Not authenticated");
            return;
        }

        service.getScanHistory("Bearer " + authToken).enqueue(new retrofit2.Callback<ScanHistoryResponse>() {
            @Override
            public void onResponse(retrofit2.Call<ScanHistoryResponse> call, retrofit2.Response<ScanHistoryResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    callback.onSuccess(response.body());
                } else {
                    callback.onError("Failed to get scan history");
                }
            }

            @Override
            public void onFailure(retrofit2.Call<ScanHistoryResponse> call, Throwable t) {
                callback.onError(t.getMessage());
            }
        });
    }

    public void getScanDetails(String scanId, Callback<ScanResponse> callback) {
        if (callback == null) return;
        if (authToken == null) {
            callback.onError("Not authenticated");
            return;
        }

        service.getScanDetails("Bearer " + authToken, scanId).enqueue(new retrofit2.Callback<ScanResponse>() {
            @Override
            public void onResponse(retrofit2.Call<ScanResponse> call, retrofit2.Response<ScanResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    callback.onSuccess(response.body());
                } else {
                    callback.onError("Failed to get scan details");
                }
            }

            @Override
            public void onFailure(retrofit2.Call<ScanResponse> call, Throwable t) {
                callback.onError(t.getMessage());
            }
        });
    }

    public void deleteScan(String scanId, Callback<DeleteResponse> callback) {
        if (callback == null) return;
        if (authToken == null) {
            callback.onError("Not authenticated");
            return;
        }

        service.deleteScan("Bearer " + authToken, scanId).enqueue(new retrofit2.Callback<DeleteResponse>() {
            @Override
            public void onResponse(retrofit2.Call<DeleteResponse> call, retrofit2.Response<DeleteResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    callback.onSuccess(response.body());
                } else {
                    callback.onError("Failed to delete scan");
                }
            }

            @Override
            public void onFailure(retrofit2.Call<DeleteResponse> call, Throwable t) {
                callback.onError(t.getMessage());
            }
        });
    }
} 
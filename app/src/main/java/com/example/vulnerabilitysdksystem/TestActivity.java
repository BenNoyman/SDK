package com.example.vulnerabilitysdksystem;

import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.example.vulnerabilitysdksystem.vulnerabilities.controller.VulnerabilitiesController;
import com.example.vulnerabilitysdksystem.vulnerabilities.model.AuthResponse;
import com.example.vulnerabilitysdksystem.vulnerabilities.model.DeleteResponse;
import com.example.vulnerabilitysdksystem.vulnerabilities.model.ScanResponse;
import com.example.vulnerabilitysdksystem.vulnerabilities.model.ScanHistoryResponse;
import com.example.vulnerabilitysdksystem.vulnerabilities.model.ScanResults;
import com.example.vulnerabilitysdksystem.vulnerabilities.model.Vulnerability;

import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.security.MessageDigest;

public class TestActivity extends AppCompatActivity {
    private static final String TAG = "TestActivity";
    private VulnerabilitiesController controller;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        controller = new VulnerabilitiesController();


        //registerMultipleUsers();
        //registerAndStartTest();
        String code = "public class UserService {\\n" +
                "    public void register(String userEmail) {\\n" +
                "        String secretToken = \\\"token_ABC123\\\";\\n" +
                "        System.out.println(\\\"Posting to http://api.example.org/register\\\");\\n" +
                "    }\\n" +
                "}";
        String code3 = "public class DataProcessor {\n" +
                "    public void processData(byte[] data) {\n" +
                "        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));\n" +
                "        Object obj = ois.readObject(); // Vulnerable to insecure deserialization\n" +
                "    }\n" +
                "}";
        final String codeSample =
                "public class Example {\n" +
                        "    // This line will trigger a Semgrep rule for hardcoded passwords\n" +
                        "    private static final String SECRET = \"hunter2\";\n" +
                        "}";
        final String codeSample1 =
                // imports arenâ€™t parsed by the scanner, but give context
                "import java.io.*;\\n" +
                        "import java.security.*;\\n" +
                        "import java.net.*;\\n" +
                        "\\n" +
                        "public class MultiVulnTest {\\n" +
                        "    // 1) SQL Injection\\n" +
                        "    public void sqlInjection(String userInput) throws Exception {\\n" +
                        "        String query = \"SELECT * FROM users WHERE name='\" + userInput + \"'\";\\n" +
                        "        Statement stmt = conn.createStatement(); stmt.executeQuery(query);\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // 2) Hardcoded Credentials\\n" +
                        "    public void hardcodedCreds() {\\n" +
                        "        String apiKey = \"sk_live_ABCDEF123456\";\\n" +
                        "        String password = \"hunter2\";\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // 3) Insecure Deserialization\\n" +
                        "    public void insecureDeserialization(byte[] data) throws Exception {\\n" +
                        "        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));\\n" +
                        "        Object obj = ois.readObject();\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // 4) Cross-Site Scripting (XSS)\\n" +
                        "    public String renderComment(String comment) {\\n" +
                        "        return \"<p>\" + comment + \"</p>\";\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // 5) Command Injection\\n" +
                        "    public void commandInjection(String cmd) throws IOException {\\n" +
                        "        Runtime.getRuntime().exec(\"sh -c \" + cmd);\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // 6) Path Traversal\\n" +
                        "    public void readFile(String filename) throws IOException {\\n" +
                        "        File f = new File(\"/var/www/data/\" + filename);\\n" +
                        "        new FileInputStream(f);\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // 7) Insecure Cryptographic Storage (MD5)\\n" +
                        "    public String hashPassword(String pwd) throws Exception {\\n" +
                        "        MessageDigest md = MessageDigest.getInstance(\"MD5\");\\n" +
                        "        byte[] hash = md.digest(pwd.getBytes());\\n" +
                        "        return new String(hash);\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // 8) Server-Side Request Forgery (SSRF)\\n" +
                        "    public void ssrf(String host) throws IOException {\\n" +
                        "        URL u = new URL(\"http://\" + host);\\n" +
                        "        u.openConnection().getInputStream();\\n" +
                        "    }\\n" +
                        "}";
        final String codeSample2 =
                "public class HighFindingsTest {\\n" +
                        "    // SQL Injection #1 (High)\\n" +
                        "    void sql1(String u) {\\n" +
                        "        String q = \"SELECT * FROM users WHERE id='\" + u + \"'\";\\n" +
                        "        stmt.executeQuery(q);\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // SQL Injection #2 (High)\\n" +
                        "    void sql2(String u) {\\n" +
                        "        String q2 = \"SELECT * FROM users WHERE name='\" + u + \"'\";\\n" +
                        "        stmt.execute(q2);\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // Command Injection #1 (High)\\n" +
                        "    void cmd1(String c) throws IOException {\\n" +
                        "        Runtime.getRuntime().exec(c);\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // Command Injection #2 (High)\\n" +
                        "    void cmd2(String c) throws IOException {\\n" +
                        "        Runtime.getRuntime().exec(\"sh -c \" + c);\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // Insecure Deserialization #1 (High)\\n" +
                        "    void deser1(byte[] data) throws Exception {\\n" +
                        "        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));\\n" +
                        "        ois.readObject();\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // Insecure Deserialization #2 (High)\\n" +
                        "    void deser2(byte[] data) throws Exception {\\n" +
                        "        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(data));\\n" +
                        "        in.readObject();\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // SSRF #1 (High)\\n" +
                        "    void ssrf1(String host) throws IOException {\\n" +
                        "        URL u = new URL(host);\\n" +
                        "        u.openConnection().getInputStream();\\n" +
                        "    }\\n" +
                        "\\n" +
                        "    // SSRF #2 (High)\\n" +
                        "    void ssrf2(String host) throws IOException {\\n" +
                        "        HttpURLConnection c = (HttpURLConnection) new URL(host).openConnection();\\n" +
                        "        c.connect();\\n" +
                        "    }\\n" +
                        "}";
        newScan(codeSample2);
        //deleteScan();
        //showScan();
        //showHistory();

    }

    private void registerMultipleUsers() {
        // User 1: SQL Injection vulnerability
        String username1 = "sqlUser";
        String password1 = "pass123";
        String code1 = "public class DatabaseService {\n" +
                "    public void getUserData(String userId) {\n" +
                "        String query = \"SELECT * FROM users WHERE id = '\" + userId + \"'\";\n" +
                "        // Vulnerable to SQL injection\n" +
                "        executeQuery(query);\n" +
                "    }\n" +
                "}";

        // User 2: Hardcoded credentials
        String username2 = "credUser";
        String password2 = "pass456";
        String code2 = "public class ConfigService {\n" +
                "    private static final String DB_PASSWORD = \"superSecret123\";\n" +
                "    private static final String API_KEY = \"sk_live_123456789\";\n" +
                "    // Hardcoded sensitive information\n" +
                "}";

        // User 3: Insecure deserialization
        String username3 = "serialUser";
        String password3 = "pass789";
        String code3 = "public class DataProcessor {\n" +
                "    public void processData(byte[] data) {\n" +
                "        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));\n" +
                "        Object obj = ois.readObject(); // Vulnerable to insecure deserialization\n" +
                "    }\n" +
                "}";

        // User 4: Cross-Site Scripting (XSS)
        String username4 = "xssUser";
        String password4 = "pass101";
        String code4 = "public class WebService {\n" +
                "    public String generateResponse(String userInput) {\n" +
                "        return \"<div>\" + userInput + \"</div>\"; // Vulnerable to XSS\n" +
                "    }\n" +
                "}";

        // User 5: Command Injection
        String username5 = "cmdUser";
        String password5 = "pass202";
        String code5 = "public class SystemCommand {\n" +
                "    public void executeCommand(String command) {\n" +
                "        Runtime.getRuntime().exec(\"ping \" + command); // Vulnerable to command injection\n" +
                "    }\n" +
                "}";

        // User 6: Path Traversal
        String username6 = "pathUser";
        String password6 = "pass303";
        String code6 = "public class FileService {\n" +
                "    public void readFile(String fileName) {\n" +
                "        File file = new File(\"/var/www/files/\" + fileName); // Vulnerable to path traversal\n" +
                "        // Read file contents\n" +
                "    }\n" +
                "}";

        // User 7: Insecure Direct Object Reference (IDOR)
        String username7 = "idorUser";
        String password7 = "pass404";
        String code7 = "public class UserService {\n" +
                "    public User getUserProfile(String userId) {\n" +
                "        // No authorization check before accessing user data\n" +
                "        return database.getUserById(userId);\n" +
                "    }\n" +
                "}";

        // User 8: Insecure Cryptographic Storage
        String username8 = "cryptoUser";
        String password8 = "pass505";
        String code8 = "public class CryptoService {\n" +
                "    public String encryptPassword(String password) {\n" +
                "        // Using weak MD5 hashing\n" +
                "        return MessageDigest.getInstance(\"MD5\").digest(password.getBytes()).toString();\n" +
                "    }\n" +
                "}";

        // Register and scan for all users
        registerAndScan(username1, password1, code1);
        registerAndScan(username2, password2, code2);
        registerAndScan(username3, password3, code3);
        registerAndScan(username4, password4, code4);
        registerAndScan(username5, password5, code5);
        registerAndScan(username6, password6, code6);
        registerAndScan(username7, password7, code7);
        registerAndScan(username8, password8, code8);
    }

    private void registerAndScan(String username, String password, String code) {
        controller.register(username, password, new VulnerabilitiesController.Callback<AuthResponse>() {
            @Override
            public void onSuccess(AuthResponse response) {
                Log.i(TAG, "Registered user: " + username + ", Token: " + response.getToken());
                // After registration, submit a scan for this user
                submitScanForUser(response.getToken(), username, code);
            }

            @Override
            public void onError(String error) {
                Log.e(TAG, "Failed to register user: " + username + ". Error: " + error);
            }
        });
    }

    private void submitScanForUser(String token, String username, String code) {
        controller.scanCode(token, code, "java", new VulnerabilitiesController.Callback<ScanResponse>() {
            @Override
            public void onSuccess(ScanResponse response) {
                Log.i(TAG, "Scan submitted for user: " + username + ", Scan ID: " + response.getScanId());
            }

            @Override
            public void onError(String error) {
                Log.e(TAG, "Failed to submit scan for user: " + username + ". Error: " + error);
            }
        });
    }

    private void showHistory(){
        controller.getScanHistory("GSTI", new VulnerabilitiesController.Callback<ScanHistoryResponse>() {
            @Override
            public void onSuccess(ScanHistoryResponse response) {

            }

            @Override
            public void onError(String error) {

            }
        });

    }

    private void showScan(){
        controller.getScanDetails("GSTI", "681f0960c3818f3b76d3f5b4", new VulnerabilitiesController.Callback<ScanResponse>() {
            @Override
            public void onSuccess(ScanResponse response) {

            }

            @Override
            public void onError(String error) {

            }
        });

    }


    private void deleteScan(){
        controller.deleteScan("GSTI", "681f0960c3818f3b76d3f5b4", new VulnerabilitiesController.Callback<DeleteResponse>() {
            @Override
            public void onSuccess(DeleteResponse response) {

            }

            @Override
            public void onError(String error) {

            }
        });

    }

    private void newScan(String code){
        controller.scanCode("N0GY", code, "java", new VulnerabilitiesController.Callback<ScanResponse>() {
            @Override
            public void onSuccess(ScanResponse response) {

            }

            @Override
            public void onError(String error) {

            }
        });

    }

    private void registerAndStartTest() {
        controller.register("", "pass21", new VulnerabilitiesController.Callback<AuthResponse>() {
            @Override
            public void onSuccess(AuthResponse response) {
                // After registration, we can directly start scanning
            }

            @Override
            public void onError(String error) {

            }
        });
    }


} 
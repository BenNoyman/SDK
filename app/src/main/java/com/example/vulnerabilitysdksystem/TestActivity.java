package com.example.vulnerabilitysdksystem;

import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.example.vulnerabilitysdksystem.vulnerabilities.controller.VulnerabilitiesController;
import com.example.vulnerabilitysdksystem.vulnerabilities.model.AuthResponse;
import com.example.vulnerabilitysdksystem.vulnerabilities.model.ScanResponse;
import com.example.vulnerabilitysdksystem.vulnerabilities.model.ScanHistoryResponse;
import com.example.vulnerabilitysdksystem.vulnerabilities.model.ScanResults;
import com.example.vulnerabilitysdksystem.vulnerabilities.model.Vulnerability;

public class TestActivity extends AppCompatActivity {
    private static final String TAG = "TestActivity";
    private VulnerabilitiesController controller;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        try {
            Log.i(TAG, "TestActivity onCreate started");
            Toast.makeText(this, "TestActivity started", Toast.LENGTH_LONG).show();
            
            // Initialize SDK controller
            controller = new VulnerabilitiesController();
            Log.i(TAG, "Controller initialized");

            // Start the test process
            loginAndScan();
        } catch (Exception e) {
            Log.e(TAG, "Error in onCreate: " + e.getMessage(), e);
            Toast.makeText(this, "Error: " + e.getMessage(), Toast.LENGTH_LONG).show();
        }
    }

//    private void startTest() {
//        Log.i(TAG, "Starting registration process...");
//        Toast.makeText(this, "Starting registration...", Toast.LENGTH_SHORT).show();
//
//        try {
//            controller.register("bb", "123", new VulnerabilitiesController.Callback<AuthResponse>() {
//                @Override
//                public void onSuccess(AuthResponse response) {
//                    Log.i(TAG, "Registration successful!");
//                    Log.i(TAG, "Access Token: " + response.getToken());
//                    Log.i(TAG, "User ID: " + response.getUserId());
//                    Log.i(TAG, "Username: " + response.getUsername());
//                    Log.i(TAG, "Message: " + response.getMessage());
//                    runOnUiThread(() -> {
//                        Toast.makeText(TestActivity.this, "Registration successful!", Toast.LENGTH_SHORT).show();
//                        // After registration, login
//                        loginAndScan();
//                    });
//                }
//
//                @Override
//                public void onError(String error) {
//                    Log.e(TAG, "Registration failed: " + error);
//                    runOnUiThread(() -> {
//                        Toast.makeText(TestActivity.this, "Registration failed: " + error, Toast.LENGTH_LONG).show();
//                    });
//                }
//            });
//        } catch (Exception e) {
//            Log.e(TAG, "Error during registration: " + e.getMessage(), e);
//            Toast.makeText(this, "Registration error: " + e.getMessage(), Toast.LENGTH_LONG).show();
//        }
//    }

    private void loginAndScan() {
        Log.i(TAG, "Starting login process...");
        Toast.makeText(this, "Starting login...", Toast.LENGTH_SHORT).show();

        try {
            controller.login("bb", "123", new VulnerabilitiesController.Callback<AuthResponse>() {
                @Override
                public void onSuccess(AuthResponse response) {
                    Log.i(TAG, "Login successful!");
                    Log.i(TAG, "Access Token: " + response.getToken());
                    Log.i(TAG, "User ID: " + response.getUserId());
                    Log.i(TAG, "Username: " + response.getUsername());
                    Log.i(TAG, "Message: " + response.getMessage());
                    runOnUiThread(() -> {
                        Toast.makeText(TestActivity.this, "Login successful!", Toast.LENGTH_SHORT).show();
                        performScan();
                    });
                }

                @Override
                public void onError(String error) {
                    Log.e(TAG, "Login failed: " + error);
                    runOnUiThread(() -> {
                        Toast.makeText(TestActivity.this, "Login failed: " + error, Toast.LENGTH_LONG).show();
                    });
                }
            });
        } catch (Exception e) {
            Log.e(TAG, "Error during login: " + e.getMessage(), e);
            Toast.makeText(this, "Login error: " + e.getMessage(), Toast.LENGTH_LONG).show();
        }
    }

    private void performScan() {
        Log.i(TAG, "Starting code scan...");
        Toast.makeText(this, "Starting code scan...", Toast.LENGTH_SHORT).show();

        try {
            String testCode = "String apiKey = \"secret1234\";\n" +
                    "String password = \"mypasswordd\";\n" +
                    "http://insecure.com";

            controller.scanCode(testCode, "java", new VulnerabilitiesController.Callback<ScanResponse>() {
                @Override
                public void onSuccess(ScanResponse response) {
                    Log.i(TAG, "Scan successful!");
                    Log.i(TAG, "Scan ID: " + response.getScanId());

                    ScanResults results = response.getResults();
                    if (results != null) {
                        runOnUiThread(() -> {
                            Toast.makeText(TestActivity.this,
                                    "Scan completed! Token: " + results.getTimestamp(), // optional display field
                                    Toast.LENGTH_LONG).show();
                        });

                        if (results.getFindings() != null && !results.getFindings().isEmpty()) {
                            for (Vulnerability.Finding finding : results.getFindings()) {
                                Log.i(TAG, String.format("Finding: %s (Severity: %s) at line %d",
                                        finding.getDescription(),
                                        finding.getSeverity(),
                                        finding.getLineNumber()));
                            }
                        } else {
                            Log.i(TAG, "No vulnerabilities found");
                        }
                    } else {
                        Log.i(TAG, "Scan completed but no results object returned.");
                    }
                }

                @Override
                public void onError(String error) {
                    Log.e(TAG, "Scan failed: " + error);
                    runOnUiThread(() -> {
                        Toast.makeText(TestActivity.this, "Scan failed: " + error, Toast.LENGTH_LONG).show();
                    });
                }
            });
        } catch (Exception e) {
            Log.e(TAG, "Error during scan: " + e.getMessage(), e);
            Toast.makeText(this, "Scan error: " + e.getMessage(), Toast.LENGTH_LONG).show();
        }
    }

} 